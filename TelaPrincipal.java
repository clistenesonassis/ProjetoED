/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package PacoteCanvas;

import FilaEncadeada.FilaArray;
import Listas.ListaSequencial;
import Listas.LSE;
import javax.swing.JOptionPane;
import Pilha.Pilha;

/**
 *
 * @author jpedr
 */
public class TelaPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form TelaPrincipal
     */
    //private Canvas canvas;
    private Retangulo retangulo;
    private FilaArray filaArray;
    private Canvas canvas;
    private Pilha pilha;
    private LSE lse;
    private ListaSequencial listaSequencial;
    //ArrayList<String> fila;
    String consulta;
    int nElementos = 0, escolha = 0, valor = 0, x = 0, y = 100, contador = 0, z=0;

    public TelaPrincipal() {
        initComponents();
        canvas = new Canvas();
        canvas.setBounds(HEIGHT + 200, WIDTH + 5, 1100, 700);
        this.add(canvas);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        criarEstrutura = new javax.swing.JButton();
        removerDaEstrutura = new javax.swing.JButton();
        adicionarNaEstrutura = new javax.swing.JButton();
        buscaNaEstrutura = new javax.swing.JButton();
        ComBoxEscolha = new javax.swing.JComboBox<>();
        txtTamanhoDaEstrutura = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setPreferredSize(new java.awt.Dimension(170, 170));

        criarEstrutura.setText("Criar");
        criarEstrutura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                criarEstruturaActionPerformed(evt);
            }
        });

        removerDaEstrutura.setText("Remover Elemento");
        removerDaEstrutura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerDaEstruturaActionPerformed(evt);
            }
        });

        adicionarNaEstrutura.setText("Adicionar Elemento");
        adicionarNaEstrutura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adicionarNaEstruturaActionPerformed(evt);
            }
        });

        buscaNaEstrutura.setText("Buscar");
        buscaNaEstrutura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscaNaEstruturaActionPerformed(evt);
            }
        });

        ComBoxEscolha.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ComBoxEscolha.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Fila Encadeada", "Pilha", "Lista Sequencial", "LDE" }));
        ComBoxEscolha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComBoxEscolhaActionPerformed(evt);
            }
        });

        txtTamanhoDaEstrutura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTamanhoDaEstruturaActionPerformed(evt);
            }
        });

        jLabel1.setText("Tam:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(adicionarNaEstrutura, javax.swing.GroupLayout.Alignment.CENTER, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(criarEstrutura, javax.swing.GroupLayout.Alignment.CENTER, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(removerDaEstrutura, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(buscaNaEstrutura, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(12, 12, 12))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ComBoxEscolha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTamanhoDaEstrutura, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ComBoxEscolha, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 324, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTamanhoDaEstrutura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(36, 36, 36)
                .addComponent(criarEstrutura, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(adicionarNaEstrutura, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(removerDaEstrutura, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buscaNaEstrutura, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(1115, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void criarEstruturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_criarEstruturaActionPerformed

        //////////////// PILHAS \\\\\\\\\\\\\\\\\\
        if (String.valueOf(ComBoxEscolha.getSelectedItem()).equalsIgnoreCase("Pilha")) {
            if (canvas.Tamanho() == 0) {
                pilha = new Pilha(Integer.parseInt(txtTamanhoDaEstrutura.getText()));
                x = 0;
                y = 400;
            } else {
                JOptionPane.showMessageDialog(null, "Uma estrutura já foi criada. Remova todos os elementos"
                        + " da estrutura para criar outra !", "CRIAR PILHA", JOptionPane.ERROR_MESSAGE);
            }
        }

        //////////////// FILAS ENCADEADAS \\\\\\\\\\\\\\\\\\
        if (String.valueOf(ComBoxEscolha.getSelectedItem()).equalsIgnoreCase("Fila Encadeada")) {
            if (canvas.Tamanho() == 0) {
                filaArray = new FilaArray();
                y = 300;
                x = 0;
            } else {
                JOptionPane.showMessageDialog(null, "Uma estrutura já foi criada. Remova todos os elementos"
                        + " da estrutura para criar outra !", "CRIAR FILA", JOptionPane.ERROR_MESSAGE);
            }
        }
        //////////////// LISTAS SEQUENCIAL \\\\\\\\\\\\\\\\\\
        if (String.valueOf(ComBoxEscolha.getSelectedItem()).equalsIgnoreCase("Lista Sequencial")) {
            if (canvas.Tamanho() == 0) {
                listaSequencial = new ListaSequencial(Integer.parseInt(txtTamanhoDaEstrutura.getText()));
                x = 0;
                y = 300;
            } else {
                JOptionPane.showMessageDialog(null, "Uma estrutura já foi criada. Remova todos os elementos"
                        + " da estrutura para criar outra !", "CRIAR LISTA SEQUENCIAL", JOptionPane.ERROR_MESSAGE);
            }
        }
        
        /*******************************************************************************
        //////////////// LIASTAS DUPLAMENTE ENCADEADAS \\\\\\\\\\\\\\\\\\
        if (String.valueOf(ComBoxEscolha.getSelectedItem()).equalsIgnoreCase("LDE")) {
            if (canvas.Tamanho() == 0) {
                lde = new ListaSequencial();
            } else {
                JOptionPane.showMessageDialog(null, "Uma estrutura já foi criada. Remova todos os elementos"
                        + " da estrutura para criar outra !", "CRIAR LDE", JOptionPane.ERROR_MESSAGE);
            }
        }
        *******************************************************************************/
    }//GEN-LAST:event_criarEstruturaActionPerformed

    private void removerDaEstruturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerDaEstruturaActionPerformed
        //////////////// PILHAS \\\\\\\\\\\\\\\\\\
        if (String.valueOf(ComBoxEscolha.getSelectedItem()).equalsIgnoreCase("Pilha")) {
            if (!pilha.vazio()) {
                canvas.remover(pilha.getTopo());
                pilha.removeElem();
                canvas.paintPilha(canvas.getGraphics());
                y = (y = y + 30);
            } else {
                JOptionPane.showMessageDialog(null, "A pilha está vazia.", "ERRO AO REMOVER ELEMENTO", JOptionPane.ERROR_MESSAGE);
            }
        }

        //////////////// FILAS ENCADEADAS \\\\\\\\\\\\\\\\\\       
        if (String.valueOf(ComBoxEscolha.getSelectedItem()).equalsIgnoreCase("Fila Encadeada")) {
            if (!filaArray.vazio()) {
                canvas.remover(filaArray.getInicio());
                filaArray.removeElem();
                canvas.paintFila(canvas.getGraphics());
                
            } else {
                JOptionPane.showMessageDialog(null, "A fila está vazia.", "ERRO AO REMOVER ELEMENTO", JOptionPane.ERROR_MESSAGE);
            }
        }
        
        /*************************************************************************************
        //////////////// LISTAS SIMPLISMENTE ENCADEADAS \\\\\\\\\\\\\\\\\\
        if (String.valueOf(ComBoxEscolha.getSelectedItem()).equalsIgnoreCase("Lista Si")) {
            if (!lse.vazia()) {
                canvas.remover(lse.getFim());
                lse.remover();
                canvas.paintLSE(canvas.getGraphics());
                z = (z = z + 30);
            } else {
                JOptionPane.showMessageDialog(null, "A lista está vazia.", "ERRO AO REMOVER ELEMENTO", JOptionPane.ERROR_MESSAGE);
            }
        }
        *************************************************************************************/
        
        //////////////// LISTA SEQUENCIAL \\\\\\\\\\\\\\\\\\
        if (String.valueOf(ComBoxEscolha.getSelectedItem()).equalsIgnoreCase("Lista Sequencial")) {
            if (!listaSequencial.vazia()) {
                int pos = Integer.parseInt(JOptionPane.showInputDialog("qual a posição do elemento a ser removido?"));
                //listaSequencial.remove(pos);
                System.out.println("elemRemov: " + listaSequencial.remove(pos));
                canvas.remover(pos-1);
                canvas.paintListaSequencial(canvas.getGraphics());
                x = (x - 70);
            } else {
                JOptionPane.showMessageDialog(null, "A lista está vazia.", "ERRO AO REMOVER ELEMENTO", JOptionPane.ERROR_MESSAGE);
            }
        }
        
    }//GEN-LAST:event_removerDaEstruturaActionPerformed

    private void adicionarNaEstruturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adicionarNaEstruturaActionPerformed

        //////////////// PILHAS \\\\\\\\\\\\\\\\\\
        if (String.valueOf(ComBoxEscolha.getSelectedItem()).equalsIgnoreCase("Pilha")) {

            try {
                //Character.isAlphabetic(Interger.parseInt());
            } catch (Exception e) {
            }
            if (pilha.insereElem(Integer.parseInt(JOptionPane.showInputDialog("Valor que será empilhado ?")))) {
                //////////////// PILHAS \\\\\\\\\\\\\\\\\\
                y = (y = y - 30);
                retangulo = new Retangulo();
                retangulo.coordX = x;
                retangulo.coordY = y;
                retangulo.valor = String.valueOf(pilha.consultaElem());
                canvas.adicionar(retangulo);
                canvas.paintPilha(canvas.getGraphics());
            } else {
                JOptionPane.showMessageDialog(null, "A pilha está cheia!", "Falha na inserção do Elemento", JOptionPane.ERROR_MESSAGE);
            }

        }

        //////////////// FILAS ENCADEADAS \\\\\\\\\\\\\\\\\\     
        if (String.valueOf(ComBoxEscolha.getSelectedItem()).equalsIgnoreCase("Fila Encadeada")) {
            if(filaArray.vazio())
                x = 0;
            if (filaArray.insereElem(Integer.parseInt(JOptionPane.showInputDialog("Qual valor deseja adicionar na fila?")))) {

                retangulo = new Retangulo();
                retangulo.coordX = x;
                retangulo.coordY = y;
                retangulo.valor = String.valueOf(filaArray.consultaElem());
                canvas.adicionar(retangulo);
                canvas.paintFila(canvas.getGraphics());
                x = x + 70;
            } else {
                JOptionPane.showMessageDialog(null, "A fila está cheia!", "Falha na inserção do Elemento", JOptionPane.ERROR_MESSAGE);
            }
        }
        //////////////// LISTAS SEQUENCIAL \\\\\\\\\\\\\\\\\\
        if (String.valueOf(ComBoxEscolha.getSelectedItem()).equalsIgnoreCase("Lista Sequencial")) {
            int pos;
            pos = Integer.parseInt(JOptionPane.showInputDialog("Posição do elemento:"));
            if( (listaSequencial.tamanho() >= 1) && (pos <= listaSequencial.tamanho()) ){
                
                retangulo = new Retangulo();
                int elem;
                elem = Integer.parseInt(JOptionPane.showInputDialog("Qual valor deseja adicionar na fila?")); 
                listaSequencial.insere(pos, elem);
                
                retangulo.coordX = canvas.getPoligono(pos-1).coordX;
                retangulo.coordY = canvas.getPoligono(pos-1).coordY;
                retangulo.valor = String.valueOf(elem);
                canvas.remover(pos-1);
                canvas.adicionar(retangulo);
                canvas.paintListaSequencial(canvas.getGraphics());
                
            }else{
                if (listaSequencial.insereFinal(Integer.parseInt(JOptionPane.showInputDialog("Qual valor deseja adicionar na LSE?")))) {
                    
                    retangulo = new Retangulo();
                    retangulo.coordX = x;
                    retangulo.coordY = y;
                    retangulo.valor = String.valueOf(listaSequencial.elemento(listaSequencial.tamanho()));
                    canvas.adicionar(retangulo);
                    canvas.paintListaSequencial(canvas.getGraphics());
                    x = x + 70;
                } else {
                    JOptionPane.showMessageDialog(null, "A Lista está cheia!", "Falha na inserção do Elemento", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
        
        
        /*******************************************************************************
        //////////////// LISTAS DUPLAMENTE ENCADEADAS \\\\\\\\\\\\\\\\\\
        if (String.valueOf(ComBoxEscolha.getSelectedItem()).equalsIgnoreCase("LSE")) {
            if (lde.adicionar(Integer.parseInt(JOptionPane.showInputDialog("Qual valor deseja adicionar na LSE?")))) {

                retangulo = new Retangulo();
                retangulo.coordX = x;
                retangulo.coordY = y;
                retangulo.valor = String.valueOf(lde.consultaElem());
                canvas.adicionar(retangulo);
                canvas.paintLDE(canvas.getGraphics());
                z = z + 70;
            } else {
                JOptionPane.showMessageDialog(null, "A Lista está cheia!", "Falha na inserção do Elemento", JOptionPane.ERROR_MESSAGE);
            }
        }
        *******************************************************************************/
    }//GEN-LAST:event_adicionarNaEstruturaActionPerformed

    private void buscaNaEstruturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscaNaEstruturaActionPerformed

        //////////////// PILHAS \\\\\\\\\\\\\\\\\\
        if (String.valueOf(ComBoxEscolha.getSelectedItem()).equalsIgnoreCase("Pilha")) {
            if (!pilha.vazio()) {
                JOptionPane.showMessageDialog(null, "O valor no Topo da Pilha é: " + pilha.consultaElem(), "CONSULTA ELEMENTO", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "A pilha está vazia.", "CONSULTA ELEMENTO", JOptionPane.INFORMATION_MESSAGE);
            }
        }

        //////////////// FILA ENCADEADA \\\\\\\\\\\\\\\\\\
        if (String.valueOf(ComBoxEscolha.getSelectedItem()).equalsIgnoreCase("Fila Encadeada")) {
            if (!filaArray.vazio()) {
                JOptionPane.showMessageDialog(null, "O primeiro elemento da fila é: " + filaArray.consultarElem(), "CONSULTA ELEMENTO", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "A fila está vazia.", "CONSULTA ELEMENTO", JOptionPane.INFORMATION_MESSAGE);
            }
        }
        
        /*******************************************************************************
        //////////////// LISTA SIMPLISMENTE ENCADEADA\\\\\\\\\\\\\\\\\\
        if (String.valueOf(ComBoxEscolha.getSelectedItem()).equalsIgnoreCase("LSE")) {
            if (!filaArray.vazio()) {
                JOptionPane.showMessageDialog(null, "O primeiro elemento da Lista é: " + lse.consultaElem() +" e o ultimo" +lse.consultaElemf() , "CONSULTA ELEMENTO", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "A lista está vazia.", "CONSULTA ELEMENTO", JOptionPane.INFORMATION_MESSAGE);
            }
            
        }
        *******************************************************************************/
        
         //////////////// LISTA SEQUENCIAL\\\\\\\\\\\\\\\\\\
        if (String.valueOf(ComBoxEscolha.getSelectedItem()).equalsIgnoreCase("Lista Sequencial")) {
            if (!listaSequencial.vazia()) {
                int aux = listaSequencial.elemento(Integer.parseInt(JOptionPane.showInputDialog("Elemento?")));
                if(aux == -1){
                    JOptionPane.showMessageDialog(null, "A lista tem menos elementos que o indicado.", "BUSCA LISTA SEQUENCIAL", JOptionPane.ERROR_MESSAGE);
                }else
                    JOptionPane.showMessageDialog(null, "O primeiro elemento da Lista é: " + aux, "CONSULTA ELEMENTO", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "A fila está vazia.", "CONSULTA ELEMENTO", JOptionPane.ERROR_MESSAGE);
            }
            
        }
        
    }//GEN-LAST:event_buscaNaEstruturaActionPerformed

    private void ComBoxEscolhaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComBoxEscolhaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ComBoxEscolhaActionPerformed

    private void txtTamanhoDaEstruturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTamanhoDaEstruturaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTamanhoDaEstruturaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComBoxEscolha;
    private javax.swing.JButton adicionarNaEstrutura;
    private javax.swing.JButton buscaNaEstrutura;
    private javax.swing.JButton criarEstrutura;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton removerDaEstrutura;
    private javax.swing.JTextField txtTamanhoDaEstrutura;
    // End of variables declaration//GEN-END:variables
}
